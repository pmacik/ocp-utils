#!/bin/bash

export AWS_DEFAULT_OUTPUT=text

N_ARG="--new-cluster"
U_ARG="--use-cluster"
D_ARG="--destroy-cluster"
DD_ARG="--destroy-cluster-by-infraid"
C_ARG="--clean-local-files"
I_ARG="--cluster-info"
L_ARG="--list-clusters"

CLI="ocp4-aws"

usage() {
    echo "Usage: $CLI ( -n | -u | -d | -D | -c | -i | -l) <name>"
    echo ""
    echo "  -n  $N_ARG    Create a new OCP4 cluster named <name>"
    echo "  -u  $U_ARG    Switch to the OCP4 cluster named <name>"
    echo "  -d  $D_ARG    Destroy the OCP4 cluster named <name>"
    echo "  -D  $DD_ARG   Destroy the OCP4 cluster by infraID=<name>"
    echo "  -c  $C_ARG    Delete local cluster directory (\$OCP_AWS_WORKSPACE/cluster/<name>)"
    echo "  -i  $I_ARG    Print cluster info from the local cluster directory (\$OCP_AWS_WORKSPACE/cluster/<name>) or (\$OCP_AWS_WORKSPACE/current if <name> is not provided)"
    echo "  -l  $L_ARG    Search for VPCs on AWS and list the cluster names that starts with the <name>"
    echo ""
    echo "Note: When OCP4_AWS_CLUSTER_NAME_SUFFIX environment variable is set the cluster name used would be <name>-<suffix>"
}

set_env() {
    export OCP4_AWS_WORKSPACE="${OCP4_AWS_WORKSPACE:-$(readlink -f .)}"
    if [ -z "$OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE" ]; then
        export OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE
    fi

    USE_OI=${1:-false}

    if [ $USE_OI == "true" ] && [ "$2" == "" ]; then

        export OI_BINARY=${OI_BINARY:-$(which openshift-install)}

        OI_VERSION=$(${OI_BINARY} version)
        if [ $? -gt 0 ]; then
            echo "ERROR openshift-install not found on PATH or the one set by OI_BINARY environment variable not found."
            exit 1
        fi
    fi
}

_new_cluster_usage() {
    echo ""
    echo "Usage: $CLI [ -n | $N_ARG ] <name>"
    echo ""
    echo "  Create a new cluster of a given name (<name>)."
    echo ""
    echo "  Looks for '\$OCP4_AWS_WORKSPACE/vault/<clustername>-install-config.yaml' file."
    echo ""
    echo "  If the file exists, a new cluster directory '\$OCP4_AWS_WORKSPACE/cluster/<name>'"
    echo "  is created and the above install config file is copied"
    echo "  to '\$OCP4_AWS_WORKSPACE/cluster/<name>/install-config.yaml' so that"
    echo "  the 'openshift-install' tool can pick it up and use it to create the new cluster."
    echo ""
    echo "  If the file does not exist, the script triggers an ordinary cluster-creating wizard"
    echo "  of the 'openshift-install' tool specifying the cluster directory by '--dir' parameter"
    echo "  by executing the following CLI:"
    echo ""
    echo "      openshift-install create cluster --log-level debug --dir \$OCP4_AWS_WORKSPACE/cluster/<name>"
    echo ""
    echo "Note: When OCP4_AWS_CLUSTER_NAME_SUFFIX environment variable is set the cluster config is first cloned (if necessary)"
    echo "while the cluster name is modified by adding the suffix to be <name>-<suffix>."
}

new_cluster() {
    set_env true $2

    CLUSTER_NAME="${1:-}"
    if [ "$CLUSTER_NAME" != "" ]; then
        CLUSTER_DIR="$OCP4_AWS_WORKSPACE/cluster/$CLUSTER_NAME"
        CLUSTER_CONFIG="$OCP4_AWS_WORKSPACE/vault/$CLUSTER_NAME-install-config.yaml"
        if [ -f "$CLUSTER_CONFIG" ]; then
            if [ ! -z $OCP4_AWS_CLUSTER_NAME_SUFFIX ]; then
                OCP4_AWS_CLUSTER_NAME_SUFFIXED="$CLUSTER_NAME-$OCP4_AWS_CLUSTER_NAME_SUFFIX"
                CLUSTER_CONFIG_SUFFIXED="$OCP4_AWS_WORKSPACE/vault/$OCP4_AWS_CLUSTER_NAME_SUFFIXED-install-config.yaml"
                sed -e "s,name: $CLUSTER_NAME,name: $OCP4_AWS_CLUSTER_NAME_SUFFIXED,g" "$CLUSTER_CONFIG" >"$CLUSTER_CONFIG_SUFFIXED"
                CLUSTER_DIR="$CLUSTER_DIR-$OCP4_AWS_CLUSTER_NAME_SUFFIX"
                CLUSTER_CONFIG=$CLUSTER_CONFIG_SUFFIXED
            fi
            echo "Using cluster config: $CLUSTER_CONFIG"
            mkdir -p "$CLUSTER_DIR"
            cp -rvf "$CLUSTER_CONFIG" "$CLUSTER_DIR/install-config.yaml"
        fi
        set -x
        ${OI_BINARY} create cluster --log-level debug --dir "$CLUSTER_DIR"
        set +x
    else
        _new_cluster_usage
    fi
}

_destroy_cluster_usage() {
    echo ""
    echo "Usage: $CLI [ -d | $D_ARG ] <name>"
    echo ""
    echo "  Destroy the cluster with a given name."
    echo ""
    echo "  Looks for the cluster directory \$OCP4_AWS_WORKSPACE/cluster/<name>'"
    echo "  and if it exists, attempts to destroy the cluster via 'openshift_install' tool."
    echo ""
    echo "Note: When OCP4_AWS_CLUSTER_NAME_SUFFIX environment variable is set the cluster name used would be <name>-<suffix>."
}

destroy_cluster() {
    set_env true "$2"

    CLUSTER_NAME="${1:-}"
    if [ ! -z $OCP4_AWS_CLUSTER_NAME_SUFFIX ]; then
        CLUSTER_NAME="$CLUSTER_NAME-$OCP4_AWS_CLUSTER_NAME_SUFFIX"
    fi
    if [ "$CLUSTER_NAME" != "" ]; then
        CLUSTER_DIR="$OCP4_AWS_WORKSPACE/cluster/$CLUSTER_NAME"
        set -x
        ${OI_BINARY} destroy cluster --log-level debug --dir "$CLUSTER_DIR"
        set +x
        echo "You can now delete the cluster directory ($CLUSTER_DIR): $CLI -c $CLUSTER_NAME"
    else
        _destroy_cluster_usage
    fi
}

_destroy_cluster_by_infraid_usage() {
    echo ""
    echo "Usage: $CLI [ -D | $DD_ARG ] <name>"
    echo ""
    echo "  Search for the cluster with a given infraID=<name> and destroy it."
    echo "  To search in a specific region use OCP4_AWS_REGION environment variable."
    echo "  Default region is us-east-2 if the above environment variable is not set."
    echo ""
}

destroy_cluster_by_infraid() {

    set_env true $2

    INFRA_ID="${1:-}"
    TMP_DIR="$(mktemp -d)"
    METADATA_FILE="$TMP_DIR/metadata.json"
    echo '{"infraID": "'$INFRA_ID'","aws": {"region": "'${OCP4_AWS_REGION:-us-east-2}'","identifier": [{ "kubernetes.io/cluster/'$INFRA_ID'": "owned" }]}}' >$METADATA_FILE

    set -x
    ${OI_BINARY} destroy cluster --log-level debug --dir $TMP_DIR
    for i in $(aws iam list-instance-profiles --output=json | jq -rc '.InstanceProfiles[] | select(.InstanceProfileName | contains("'$INFRA_ID'")).InstanceProfileName'); do
        aws iam delete-instance-profile --instance-profile-name $i
    done
    set +x

    rm -rf $TMP_DIR
}

_list_clusters_by_infraid_usage() {
    echo ""
    echo "Usage: $CLI [ -l | $L_ARG ] <name>"
    echo ""
    echo "  Search for the clusters whose infraID starts with <name> and lists them."
    echo ""
}

list_clusters_by_infraid() {
    INFRA_ID="${1:-}"
    export AWS_REGION=${OCP4_AWS_REGION:-us-east-2}
    export AWS_DEFAULT_OUTPUT=json
    if [ -n "$INFRA_ID" ]; then
        roles=$(aws iam list-roles | jq -rc '.Roles[] | select(.RoleName | startswith("'"$INFRA_ID"'")).RoleName')
    else
        roles=$(aws iam list-roles | jq -rc '.Roles[].RoleName')
    fi
    TAGS=$(for i in $roles; do aws iam list-role-tags --role-name $i | jq -rc '.Tags[] | select(.Key | startswith("kubernetes.io/cluster")).Key' | sed -e 's,kubernetes.io/cluster/\([^ ]\+\),\1,g'; done)
    {
        echo "$(for i in $TAGS; do echo $i; done)"
        aws ec2 describe-instances | jq -rc '.Reservations[].Instances[] | select(.State.Name == "running").Tags[] | select(.Key | startswith("kubernetes.io/cluster/'"$INFRA_ID"'")).Key' | sort -u | sed -e 's,kubernetes.io/cluster/\(.*\),\1,g'
    } | sort -u
}

_use_cluster_usage() {
    echo ""
    echo "Usage: $CLI [ -u | $U_ARG ] <name>"
    echo ""
    echo "  Uses the given cluster as the current one."
    echo ""
    echo "  Looks for the '\$OCP4_AWS_WORKSPACE/cluster/<name>' directory"
    echo "  and if it exists a convenient symbolic link '\$OCP4_AWS_WORKSPACE/current'"
    echo "  is created/updated pointing at '\$OCP4_AWS_WORKSPACE/cluster/<name>'."
    echo ""
    echo "Note: When OCP4_AWS_CLUSTER_NAME_SUFFIX environment variable is set the cluster name used would be <name>-<suffix>."
}

use_cluster() {
    set_env false $2

    CLUSTER_NAME="${1:-}"
    if [ ! -z $OCP4_AWS_CLUSTER_NAME_SUFFIX ]; then
        CLUSTER_NAME="$CLUSTER_NAME-$OCP4_AWS_CLUSTER_NAME_SUFFIX"
    fi
    if [ "$CLUSTER_NAME" != "" ]; then
        CLUSTER_DIR="$OCP4_AWS_WORKSPACE/cluster/$CLUSTER_NAME"
        if [ -d $CLUSTER_DIR ]; then
            echo "Using cluster: $CLUSTER_NAME"
            rm -rf $OCP4_AWS_WORKSPACE/current
            ln -s $CLUSTER_DIR $OCP4_AWS_WORKSPACE/current
        else
            echo "ERROR: Cluster directory $CLUSTER_NAME not found ($CLUSTER_DIR)."
            exit 1
        fi
    else
        _use_cluster_usage
    fi
}

_clean_local_files_usage() {
    echo ""
    echo "Usage: $CLI [ -c | $C_ARG ] <name>"
    echo ""
    echo "  Cleans (deletes) the local directory for the given cluster."
    echo ""
    echo "  Looks for the '\$OCP4_AWS_WORKSPACE/cluster/<name>' directory"
    echo "  and if it exists it's deleted."
    echo ""
    echo "Note: When OCP4_AWS_CLUSTER_NAME_SUFFIX environment variable is set the cluster name used would be <name>-<suffix>."
}

clean_local_files() {
    set_env false $2

    CLUSTER_NAME="${1:-}"
    if [ ! -z $OCP4_AWS_CLUSTER_NAME_SUFFIX ]; then
        CLUSTER_NAME="$CLUSTER_NAME-$OCP4_AWS_CLUSTER_NAME_SUFFIX"
    fi
    if [ "$CLUSTER_NAME" != "" ]; then
        CLUSTER_DIR="$OCP4_AWS_WORKSPACE/cluster/$CLUSTER_NAME"
        if [ -d $CLUSTER_DIR ]; then
            echo "Deleting local cluster directory ($CLUSTER_DIR)"
            rm -rvf $CLUSTER_DIR
        else
            echo "ERROR: Cluster directory $CLUSTER_NAME not found ($CLUSTER_DIR)."
            exit 1
        fi
    else
        _clean_local_files_usage
    fi
}

_cluster_info_usage() {
    echo ""
    echo "Usage: $CLI [ -i | $I_ARG ] (<name>)"
    echo ""
    echo "  Prints cluster info from the local directory for the given cluster."
    echo ""
    echo "  Looks for the '\$OCP4_AWS_WORKSPACE/cluster/<name>' directory"
    echo "  and if it exists the cluster connection info is extracted and printed."
    echo ""
    echo "  If <name> is not provided, it looks for the current cluster directory '\$OCP4_AWS_WORKSPACE/current'"
    echo ""
    echo "Note: When OCP4_AWS_CLUSTER_NAME_SUFFIX environment variable is set the cluster name used would be <name>-<suffix>."
}

_cluster_domain() {
    echo $(jq --raw-output '.cluster_domain' $1/terraform.tfvars.json)
}

_kubeconfig() {
    echo $1/auth/kubeconfig
}

_kubeadmin_pass() {
    echo $(cat $1/auth/kubeadmin-password)
}

cluster_info() {
    set_env false $2

    CLUSTER_NAME="${1:-}"
    if [ ! -z $OCP4_AWS_CLUSTER_NAME_SUFFIX ]; then
        CLUSTER_NAME="$CLUSTER_NAME-$OCP4_AWS_CLUSTER_NAME_SUFFIX"
    fi
    if [ "$CLUSTER_NAME" != "" ]; then
        CLUSTER_DIR="$OCP4_AWS_WORKSPACE/cluster/$CLUSTER_NAME"
    else
        CLUSTER_DIR="$OCP4_AWS_WORKSPACE/current"
    fi
    if [ -d $CLUSTER_DIR ]; then
        kubeconfig=$(_kubeconfig $CLUSTER_DIR)
        kubeadmin_pass=$(_kubeadmin_pass $CLUSTER_DIR)
        cluster_domain=$(_cluster_domain $CLUSTER_DIR)
        cluster_api=$(yq e '.clusters[0].cluster.server' $kubeconfig)
        echo "console: https://console-openshift-console.apps.$cluster_domain"
        echo "kubeadmin: $(_kubeadmin_pass $CLUSTER_DIR)"
        echo "api: $cluster_api"
        echo "cli: oc login $cluster_api -u kubeadmin -p $kubeadmin_pass"
    else
        echo "ERROR: Cluster directory not found ($CLUSTER_DIR)."
        _cluster_info_usage
        exit 1
    fi
}

case $2 in
-h | --help)
    case $1 in
    -n | $N_ARG)
        _new_cluster_usage
        ;;
    -u | $U_ARG)
        _use_cluster_usage
        ;;
    -d | $D_ARG)
        _destroy_cluster_usage
        ;;
    -D | $DD_ARG)
        _destroy_cluster_by_infraid_usage
        ;;
    -c | $C_ARG)
        _clean_local_files_usage
        ;;
    -i | $I_ARG)
        _cluster_info_usage
        ;;
    -l | $L_ARG)
        _list_clusters_by_infraid_usage
        ;;
    esac
    ;;
*) case $1 in
    -n | $N_ARG)
        new_cluster $2
        ;;
    -u | $U_ARG)
        use_cluster $2
        ;;
    -d | $D_ARG)
        destroy_cluster $2
        ;;
    -D | $DD_ARG)
        destroy_cluster_by_infraid $2
        ;;
    -c | $C_ARG)
        clean_local_files $2
        ;;
    -i | $I_ARG)
        cluster_info $2
        ;;
    -l | $L_ARG)
        list_clusters_by_infraid $2
        ;;
    -h | --help)
        usage
        exit
        ;;
    *)
        usage
        exit 1
        ;;
    esac ;;
esac
